#version 460 core

#define GroupSize 16
layout (local_size_x = GroupSize, local_size_y = GroupSize, local_size_z = 1) in;

uniform samplerCube environmentMap;
layout(rgba16) uniform writeonly imageCube irradianceMap;

uniform int irradianceMapSize;

#define PI 3.14159265358979323846

vec3 UVToDir(uint faceIndex, vec2 uv)
{
    vec2 texCoord = 2.0 * uv - 1.0;
    vec3 dir;
    if (faceIndex == 0) // GL_TEXTURE_CUBE_MAP_POSITIVE_X
        dir = vec3(1.0, -texCoord.y, -texCoord.x);
    else if (faceIndex == 1) // GL_TEXTURE_CUBE_MAP_NEGATIVE_X
        dir = vec3(-1.0, -texCoord.y, texCoord.x);
    else if (faceIndex == 2) // GL_TEXTURE_CUBE_MAP_POSITIVE_Y
        dir = vec3(texCoord.x, 1.0, texCoord.y);
    else if (faceIndex == 3) // GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
        dir = vec3(texCoord.x, -1.0, -texCoord.y);
    else if (faceIndex == 4) // GL_TEXTURE_CUBE_MAP_POSITIVE_Z
        dir = vec3(texCoord.x, -texCoord.y, 1.0);
    else if (faceIndex == 5) // GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
        dir = vec3(-texCoord.x, -texCoord.y, -1.0);
    
    return dir;
}


void main() 
{
    vec2 pixelCoord = gl_WorkGroupSize.xy  * gl_WorkGroupID.xy +  gl_LocalInvocationID.xy;
    vec2 uv = pixelCoord / irradianceMapSize;
    vec3 sampleDir = UVToDir(gl_WorkGroupID.z, uv);

    vec3 normal = normalize(sampleDir);
    vec3 up = vec3(0.0, 1.0, 0.0);
    vec3 tangent = vec3(1.0, 0.0, 0.0);

    float upOrDown = dot(normal, up);
    if (upOrDown == 1.0)
        tangent = vec3(1.0, 0.0, 0.0);
    else if (upOrDown == -1)
        tangent = vec3(-1.0, 0.0, 0.0);
    else
        tangent = normalize(cross(up, normal));

    vec3 binormal = normalize(cross(normal, tangent));

    float sampleDelta = 0.025;
    int N1 = 0;
    int N2 = 0;

    vec3 irradiance = vec3(0.0, 0.0, 0.0);

    for (float phi = 0.0; phi < 2.0 * PI; phi += sampleDelta)
    {
        N2 = 0;
        for (float theta = 0.0; theta < 0.5 * PI; theta += sampleDelta)
        {
            vec3 tangentSpaceDir = vec3(sin(theta) * cos(phi), sin(theta) * sin(phi), cos(theta));
            vec3 sampleDir = tangentSpaceDir.x * tangent + tangentSpaceDir.y * binormal + tangentSpaceDir.z * normal;
            irradiance += texture(environmentMap, sampleDir).rgb * cos(theta) * sin(theta);
            N2++;
        }
        N1++;
    }

    float weight = PI / (N1 * N2);
    irradiance *= weight;

    ivec3 irradianceMapUV = ivec3(pixelCoord, gl_WorkGroupID.z);
    imageStore(irradianceMap, irradianceMapUV, vec4(irradiance, 1.0));
}
