#version 460 core

#include "TiledCullingCommon.inc"

#define TILE_SIZE_HALF (TILE_SIZE/2)
#define NUM_THREADS_DEPTHBOUND (TILE_SIZE_HALF*TILE_SIZE_HALF)
#define NUM_THREADS_HALF (NUM_THREADS_DEPTHBOUND/2)

#define FLT_MAX  3.402823466e+38

layout (local_size_x = TILE_SIZE_HALF, local_size_y = TILE_SIZE_HALF, local_size_z = 1) in;

uniform sampler2D CmeraDepthTexture;
layout (rgba32f) writeonly uniform image2D depthBounds;

shared float ldsZMin[NUM_THREADS_DEPTHBOUND];
shared float ldsZMax[NUM_THREADS_DEPTHBOUND];

void ParallelReduction()
{
    //uint threadNum = gl_LocalInvocationIndex;
    // Min and max using parallel reduction, with the loop manually unrolled for 
    // 8x8 thread groups (64 threads per thread group)
    //if (threadNum < 32)
    //{
    //    ldsZMin[threadNum] = min(ldsZMin[threadNum],ldsZMin[threadNum+32]);
    //    ldsZMax[threadNum] = max(ldsZMax[threadNum],ldsZMax[threadNum+32]);
    //    ldsZMin[threadNum] = min(ldsZMin[threadNum],ldsZMin[threadNum+16]);
    //    ldsZMax[threadNum] = max(ldsZMax[threadNum],ldsZMax[threadNum+16]);
    //    ldsZMin[threadNum] = min(ldsZMin[threadNum],ldsZMin[threadNum+8]);
    //    ldsZMax[threadNum] = max(ldsZMax[threadNum],ldsZMax[threadNum+8]);
    //    ldsZMin[threadNum] = min(ldsZMin[threadNum],ldsZMin[threadNum+4]);
    //    ldsZMax[threadNum] = max(ldsZMax[threadNum],ldsZMax[threadNum+4]);
    //    ldsZMin[threadNum] = min(ldsZMin[threadNum],ldsZMin[threadNum+2]);
    //    ldsZMax[threadNum] = max(ldsZMax[threadNum],ldsZMax[threadNum+2]);
    //    ldsZMin[threadNum] = min(ldsZMin[threadNum],ldsZMin[threadNum+1]);
    //    ldsZMax[threadNum] = max(ldsZMax[threadNum],ldsZMax[threadNum+1]);
    //}
    //barrier();
    //memoryBarrierShared();

    //http://diaryofagraphicsprogrammer.blogspot.com/2014/03/compute-shader-optimizations-for-amd.html
    for (uint s = NUM_THREADS_HALF; s > 0; s >>= 1)
    {
        if (gl_LocalInvocationIndex < s)
        {
            ldsZMin[gl_LocalInvocationIndex] = min(ldsZMin[gl_LocalInvocationIndex], ldsZMin[gl_LocalInvocationIndex + s]);
            ldsZMax[gl_LocalInvocationIndex] = max(ldsZMax[gl_LocalInvocationIndex], ldsZMax[gl_LocalInvocationIndex + s]);
        }
        barrier();
        memoryBarrierShared();
    }
}

void main() 
{
    ivec2 texCoord = ivec2(gl_GlobalInvocationID.xy) * 2;
    ivec2 size = textureSize(CmeraDepthTexture, 0);
    int px = texCoord.x;
    int pxp = clamp(texCoord.x + 1, 0, size.x - 1);
    int py = texCoord.y;
    int pyp = clamp(texCoord.y + 1, 0, size.y - 1);

    float depth00 = texelFetch(CmeraDepthTexture, ivec2(px, py), 0).r;
    float depth01 = texelFetch(CmeraDepthTexture, ivec2(px, pyp), 0).r;
    float depth10 = texelFetch(CmeraDepthTexture, ivec2(pxp, py), 0).r;
    float depth11 = texelFetch(CmeraDepthTexture, ivec2(pxp, pyp), 0).r;

    //要求half z，需转换到线性空间
    float viewPosZ00 = -NDCToView(vec4(0.0, 0.0, 2.0 * depth00 - 1.0, 1.0)).z;
    float viewPosZ01 = -NDCToView(vec4(0.0, 0.0, 2.0 * depth01 - 1.0, 1.0)).z;
    float viewPosZ10 = -NDCToView(vec4(0.0, 0.0, 2.0 * depth10 - 1.0, 1.0)).z;
    float viewPosZ11 = -NDCToView(vec4(0.0, 0.0, 2.0 * depth11 - 1.0, 1.0)).z;

    {
        float minZ00 = viewPosZ00;
        float minZ01 = viewPosZ01;
        float minZ10 = viewPosZ10;
        float minZ11 = viewPosZ11;

        //需对视野有天空情况做特殊处理，场景和天空交叉处，控制max depth夹紧场景depth，增加额外的判断，收益怎样？
        //天空盒处深度为1
        float maxZ00 = (depth00 != 1.0) ? viewPosZ00 : 0.0;
        float maxZ01 = (depth01 != 1.0) ? viewPosZ01 : 0.0;
        float maxZ10 = (depth10 != 1.0) ? viewPosZ10 : 0.0;
        float maxZ11 = (depth11 != 1.0) ? viewPosZ11 : 0.0;
        //float maxZ00 = viewPosZ00;
        //float maxZ01 = viewPosZ01;
        //float maxZ10 = viewPosZ10;
        //float maxZ11 = viewPosZ11;

        // Initialize shared memory
        ldsZMin[gl_LocalInvocationIndex] = min(minZ00,min(minZ01,min(minZ10,minZ11)));
        ldsZMax[gl_LocalInvocationIndex] = max(maxZ00,max(maxZ01,max(maxZ10,maxZ11)));

        barrier();
        memoryBarrierShared();

        ParallelReduction();
    }

    float minZ = ldsZMin[0];
    float maxZ = ldsZMax[0];
    maxZ = (maxZ == 0.0 && minZ > 0) ? minZ : maxZ;//避免：该tile范围全为天空，aabb为z[1,0],导致大量不正确光影通过aabb测试，这种情况令max=min
    barrier();
    memoryBarrierShared();//下面有写入，需保证写入前所有线程已读取

    float halfZ = 0.5*(minZ + maxZ);

    {
        float minZ00 = ( viewPosZ00 >= halfZ ) ? viewPosZ00 : FLT_MAX;
        float minZ01 = ( viewPosZ01 >= halfZ ) ? viewPosZ01 : FLT_MAX;
        float minZ10 = ( viewPosZ10 >= halfZ ) ? viewPosZ10 : FLT_MAX;
        float minZ11 = ( viewPosZ11 >= halfZ ) ? viewPosZ11 : FLT_MAX;

        float maxZ00 = ( viewPosZ00 <= halfZ ) ? viewPosZ00 : 0.0;
        float maxZ01 = ( viewPosZ01 <= halfZ ) ? viewPosZ01 : 0.0;
        float maxZ10 = ( viewPosZ10 <= halfZ ) ? viewPosZ10 : 0.0;
        float maxZ11 = ( viewPosZ11 <= halfZ ) ? viewPosZ11 : 0.0;

        // Initialize shared memory
        ldsZMin[gl_LocalInvocationIndex] = min(minZ00,min(minZ01,min(minZ10,minZ11)));
        ldsZMax[gl_LocalInvocationIndex] = max(maxZ00,max(maxZ01,max(maxZ10,maxZ11)));

        barrier();
        memoryBarrierShared();

        ParallelReduction();
    }

    if(gl_LocalInvocationIndex == 0)
    {
        float minZ2 = ldsZMin[0];
        float maxZ2 = ldsZMax[0];
        imageStore(depthBounds, ivec2(gl_WorkGroupID.xy), -vec4(minZ, maxZ2, minZ2, maxZ));
    }
}
